@page "/authors/edit/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navigator
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Update Author</h3>

<EditForm Model="Author" OnValidSubmit="HandleUpdateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText class="form-control" @bind-Value="Author.FirstName" id="firstName" />
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>
    <div class="form-group mt-4">
        <label for="lastName">Last Name</label>
        <InputText class="form-control" @bind-Value="Author.LastName" id="lastName" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
    <div class="form-group mt-4">
        <label for="lastName">Bio</label>
        <InputText class="form-control" @bind-Value="Author.Bio" id="bio" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
    <div class="row mt-4">
        <button type="submit" class="btn btn-primary btn-block col-md-6"> <span class="oi oi-check"></span> Update Author</button>
        <button class="btn btn-outline-dark btn-block col-md-6" @onclick="BackToList">Back to list</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    private AuthorUpdateDto Author = new AuthorUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetAuthorForUpdate(id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private async Task HandleUpdateAuthor()
    {
        var response = await authorService.UpdateAuthor(id, Author);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navigator.NavigateTo("/authors/");
    }

}
